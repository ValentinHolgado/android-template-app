apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'de.mobilej.unmock'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "ar.valentinh.openlibrary"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }

        buildConfigField 'String', 'API_URL', '"https://api.artsy.net/api/"'
        buildConfigField ('String', 'API_KEY', System.getenv("ARTSY_API_KEY")
                ? "\"${System.getenv("ARTSY_API_KEY")}\""
                : '"YOUR_API_KEY"')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
    packagingOptions {
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        exclude 'license.txt'
    }
    lintOptions {
        abortOnError false
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

kapt {
    generateStubs = true
}

unMock {
    keep "android.net.Uri"
    keepStartingWith "libcore."
}
 
dependencies {

    /**
     * Production
     */

    // Android
    implementation fileTree(dir:'libs', include:['*.jar'])
    implementation "com.android.support:appcompat-v7:$android_support_version"
    implementation "com.android.support:design:$android_support_version"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    kapt "com.android.databinding:compiler:$databinding_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.trello.rxlifecycle2:rxlifecycle:$rxlifecycle_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxbinding_version"

    // Retrofit
    implementation "com.squareup.retrofit2:converter-jackson:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_kotlin_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version" // if you use the support libraries
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // OkHttp3
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // Fresco
    implementation "com.facebook.fresco:fresco:$fresco_version"

    // SoLoader
    implementation "com.facebook.soloader:soloader:$litho_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    /**
     * Debugging
     */

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    /**
     * Testing
     */

    // Junit
    testImplementation "junit:junit:$junit_version"

    // Kotlin
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // Mockito
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-android:$mockito_version"

    // Spek
    testImplementation "org.jetbrains.spek:spek-api:$spek_version"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testImplementation "org.junit.platform:junit-platform-runner:$junit_platform_runner_version"

    // Unmock
    unmock "org.robolectric:android-all:$android_jar_version"

    // Espresso
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso_core_version", {
        exclude group:'com.android.support', module:'support-annotations'
    })
}